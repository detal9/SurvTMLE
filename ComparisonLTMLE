# install.packages("mlogit");
# install.packages("SuperLearner");
# install.packages("polspline");
require(ltmle);
source("C:\\Users\\denis\\Dropbox\\Travail\\Recherche\\TmleTutorial\\Package\\survTMLE_v0_6.R");


######## Example 1 - Single baseline binary covariate 

#### Function to generate data

generateData <- function(n){
  expit <- plogis;

  ## Generate baseline data
  L <- rbinom(n, size = 1, prob = 0.5);
  A <- rbinom(n, size = 1, prob = plogis(-3 + 0.6*L));
 
  ## Generate counterfactual outcome
  #time 1
  py1.1 <- expit(-2 - 1 + 0.25*L);
  py1.0 <- expit(-2 + 0 + 0.25*L);
  Y1.1 <- rbinom(n, 1, py1.1);
  Y1.0 <- rbinom(n, 1, py1.0);

  #time 2
  Y2.1 <- Y2.0 <- rep(1, n);
  py2.1 <- expit(-2 - 1 + 0.25*L)[Y1.1 == 0];
  py2.0 <- expit(-2 + 0 + 0.25*L)[Y1.0 == 0];
  Y2.1[Y1.1 == 0] <- rbinom(n = length(py2.1), 1, py2.1);
  Y2.0[Y1.0 == 0] <- rbinom(n = length(py2.0), 1, py2.0);

  #time 3
  Y3.1 <- Y3.0 <- rep(1, n);
  py3.1 <- expit(-2 - 1 + 0.25*L)[Y2.1 == 0];
  py3.0 <- expit(-2 + 0 + 0.25*L)[Y2.0 == 0];
  Y3.1[Y2.1 == 0] <- rbinom(n = length(py3.1), 1, py3.1);
  Y3.0[Y2.0 == 0] <- rbinom(n = length(py3.0), 1, py3.0);

  #time 4
  Y4.1 <- Y4.0 <- rep(1, n);
  py4.1 <- expit(-2 - 1 + 0.25*L)[Y3.1 == 0];
  py4.0 <- expit(-2 + 0 + 0.25*L)[Y3.0 == 0];
  Y4.1[Y3.1 == 0] <- rbinom(n = length(py4.1), 1, py4.1);
  Y4.0[Y3.0 == 0] <- rbinom(n = length(py4.0), 1, py4.0);


  ## Generate censoring and observed outcome
  #time 1
  Y1 <- Y1.1*A + Y1.0*(1 - A);
  censor.prob1 <- expit(-5 + 0.2*A + 0.2*L);
  Censor1 <- rbinom(n, 1, censor.prob1);

  #time 2
  Censor2 <- rep(1, n);
  censor.prob2 <- expit(-5 + 0.2*A + 0.2*L)[Censor1 == 0 & Y1 == 0];
  Censor2[Censor1 == 0 & Y1 == 0] <- rbinom(n = length(censor.prob2), 1, censor.prob2);
  Y2 <- Y2.1*A + Y2.0*(1 - A);

  #time 3
  Censor3 <- rep(1, n);
  censor.prob3 <- expit(-5 + 0.2*A + 0.2*L)[Censor2 == 0 & Y2 == 0];
  Censor3[Censor2 == 0 & Y2 == 0] <- rbinom(n = length(censor.prob3), 1,
                                            censor.prob3);
  Y3 <- Y3.1*A + Y3.0*(1 - A);

  #time 4
  Censor4 <- rep(1, n);
  censor.prob4 <- expit(-5 + 0.2*A + 0.2*L)[Censor3==0 & Y3 == 0];
  Censor4[Censor3 == 0 & Y3 == 0] <- rbinom(n = length(censor.prob4), 1,
                                            censor.prob4);
  Y4 <- Y4.1*A + Y4.0*(1 - A);


  ## The observed outcome is missing if censored
  Y1[Censor1==1] <- NA; Y2[Censor2==1] <- NA; Y3[Censor3==1] <- NA; Y4[Censor4==1] <- NA;

  ## Once an event occurred, future Y = 1
  Y2[Y1 == 1] = 1;  Y3[Y2 == 1] = 1;  Y4[Y3 == 1] = 1; 

  ## return counterfactual and observed data
  data.frame(id = 1:n, L, A, Censor1, Censor2, Censor3, Censor4, Y1, Y2, Y3, Y4, Y1.1, Y2.1, Y3.1,
              Y4.1, Y1.0, Y2.0, Y3.0, Y4.0);
}


##### Estimation
n = 5000;

set.seed(1234);

dat = generateData(n)[,1:11];

results = surv.TMLE(dat = dat, Yvar = c("Y1", "Y2", "Y3", "Y4"),
                    Cvar = c("Censor1", "Censor2", "Censor3", "Censor4"),
                    Avar = "A", Lvar = list("L", "L", "L", "L"),
                    L0var = NULL, lookback = 1,
                    Ymod = "parametric", Cmod = "parametric", Amod = "parametric",
                    gbound = 0.005, V = 5, MSM.form = ~A+as.factor(time), Print = FALSE);

dat.ltmle = with(dat, data.frame(L, A, C1 = 1 - Censor1, Y1, C2 = 1 - Censor2, Y2,
                                 C3 = 1 - Censor3, Y3, C4 = 1 - Censor4, Y4));

dat.ltmle$C1 = BinaryToCensoring(is.uncensored=dat.ltmle$C1);
dat.ltmle$C2 = BinaryToCensoring(is.uncensored=dat.ltmle$C2);
dat.ltmle$C3 = BinaryToCensoring(is.uncensored=dat.ltmle$C3);
dat.ltmle$C4 = BinaryToCensoring(is.uncensored=dat.ltmle$C4);

results.ltmle0 = ltmle(data = dat.ltmle,
                       Anodes = "A",
                       Cnodes = c("C1", "C2", "C3", "C4"),
                       Ynodes = c("Y1", "Y2", "Y3", "Y4"),
                       abar = 0,
                       survivalOutcome = TRUE);

results.ltmle1 = ltmle(data = dat.ltmle,
                       Anodes = "A",
                       Cnodes = c("C1", "C2", "C3", "C4"),
                       Ynodes = c("Y1", "Y2", "Y3", "Y4"),
                       abar = 1,
                       survivalOutcome = TRUE);

# Final event probability with surv.TMLE function
1 - results$St[5,1:2]

# Exactly the same estimates with LTMLE 
results.ltmle0$estimate[1]
results.ltmle1$estimate[1]



### The MSM of ltmle is logit(P(Y_t^a = 1)) = \gamma_0 + \gamma_1 A + \gamma_2 I(time == 2) 
###                                            + \gamma_3 I(time == 3) + \gamma_4 I(time == 4) 
### The MSM of survTMLE is logit(\lambda_a(t)) = \gamma_0 + \gamma_1 A + \gamma_2 I(time == 2) 
###                                              + \gamma_3 I(time == 3) + \gamma_4 I(time == 4) 
### i.e., ltmle is modeling the probability of an event whereas survTMLE is modeling the hazard

regimes = array(, dim = c(n, 1, 2));
regimes[,1,1] = 0;
regimes[,1,2] = 1;
summary.measures = array(, dim = c(2, 4, 4),
                         dimnames = list(NULL, c("A", "time2", "time3", "time4"), NULL));
summary.measures[1,,] = matrix(c(0, 0, 0, 0,
                                 0, 1, 0, 0,
                                 0, 0, 1, 0,
                                 0, 0, 0, 1), byrow = TRUE, nrow = 4);
summary.measures[2,,] = matrix(c(1, 1, 1, 1,
                                 0, 1, 0, 0,
                                 0, 0, 1, 0,
                                 0, 0, 0, 1), byrow = TRUE, nrow = 4);
results.ltmleMSM = ltmleMSM(data = dat.ltmle,
                            Anodes = "A",
                            Cnodes = c("C1", "C2", "C3", "C4"),
                            Ynodes = c("Y1", "Y2", "Y3", "Y4"),
                            final.Ynodes = c("Y1", "Y2", "Y3", "Y4"),
                            survivalOutcome = TRUE,
                            regimes = regimes,
                            working.msm = "Y ~ A + time2 + time3 + time4",
                            summary.measures = summary.measures,
                            stratify = TRUE,
                            variance.method = "ic");
summary(results.ltmleMSM)
results$MSM
